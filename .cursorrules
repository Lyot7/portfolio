# Freelance Landing Project - Cursor Rules

## Tech Stack
- Next.js 15+ with TypeScript
- Tailwind CSS + Framer Motion
- React Bits (UI components, skeletons, loaders)
- next-intl (i18n)
- pnpm package manager

## Architecture
- SOLID principles
- Clean architecture with separated concerns
- Component composition over inheritance
- Single responsibility per component

## Folder Structure
```
src/
├── app/                    # Next.js app router
├── components/             # UI components
│   ├── ui/                # Base components
│   ├── layout/            # Layout components
│   ├── sections/          # Page sections
│   └── skeletons/         # Loading skeletons
├── hooks/                 # Custom hooks
├── lib/                   # Utilities
├── types/                 # TypeScript types
├── data/                  # Static data
└── locales/               # Translations
```

## Code Standards
- TypeScript strict mode
- Named exports for components
- Tailwind CSS for styling
- No inline styles
- No console.log in production
- Use absolute imports (@/)

## Component Guidelines
- One component = one purpose
- Extend with props, not modification
- Use composition pattern
- Small, focused interfaces
- PascalCase for components, camelCase for hooks

## Skeleton System
- **ONLY for real loading states** (translations, API calls, images)
- **NEVER for artificial delays**
- Wait for translations before showing text content
- Use exact same Tailwind classes as real components
- Match responsive dimensions

## Development Workflow
1. Read 3+ relevant files before coding
2. Run `pnpm tsc` and `pnpm lint` after changes
3. Check port 3000 before starting server: `lsof -ti:3000`
4. Kill existing process if needed: `kill -9 $(lsof -ti:3000)`
5. Test with real data or add logging

## Portfolio Pages
- Home: Creative landing with React Bits
- Projects: Portfolio showcase
- About: Experience timeline  
- Contact: Contact form

## Key Rules
- No duplication (DRY principle)
- Check existing implementations first
- Use React Bits components when available
- Maintain consistency across codebase
- Skeletons are for REAL loading only